
#include "txfutility.h"





namespace TXF
{

	/* Table of CRC values for high-order byte */
	static const uint8_t table_crc_hi[] = {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
	};

	/* Table of CRC values for low-order byte */
	static const uint8_t table_crc_lo[] = {
		0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
		0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
		0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
		0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
		0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
		0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
		0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
		0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
		0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
		0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
		0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
		0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
		0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
		0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
		0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
		0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
		0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
		0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
		0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
		0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
		0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
		0x43, 0x83, 0x41, 0x81, 0x80, 0x40
	};

	std::byte utility::LRC8(std::byte * bytes, int count)
	{
		int LRC = 0;

		for (int i = 0; i < count; i++)
		{
			LRC += (int)bytes[i];
		}

		return (std::byte)LRC;
	}


	uint16_t utility::crc16(uint8_t *buffer, uint16_t buffer_length)
	{
		uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
		uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
		unsigned int i; /* will index into CRC lookup */

		/* pass through message buffer */
		while (buffer_length--) {
			i = crc_hi ^ *buffer++; /* calculate the CRC  */
			crc_hi = crc_lo ^ table_crc_hi[i];
			crc_lo = table_crc_lo[i];
		}

		return (crc_hi << 8 | crc_lo);
	}

	std::wstring utility::StringToWstring(const std::string str)
	{
		// string转wstring
		unsigned len = str.size() * 2;// 预留字节数
		setlocale(LC_CTYPE, "");     //必须调用此函数
		wchar_t *p = new wchar_t[len];// 申请一段内存存放转换后的字符串
		size_t    _PtNumOfCharConverted;
		mbstowcs_s(&_PtNumOfCharConverted, p, len, str.c_str(), len);// 转换
		std::wstring str1(p);
		delete[] p;// 释放申请的内存
		return str1;
	}

	std::string utility::WstringToString(const std::wstring str)
	{
		// wstring转string
		unsigned len = str.size() * 4;
		setlocale(LC_CTYPE, "");
		char *p = new char[len];

		size_t    _PtNumOfCharConverted;

		wcstombs_s(&_PtNumOfCharConverted,p, len,str.c_str(), len);

		std::string str1(p);
		delete[] p;
		return str1;
	}

	std::pair<std::string,std::string> utility::GetFileNameExt(std::string path)
	{
		static const std::basic_string <char>::size_type npos = -1;

		std::basic_string <char>::size_type indexCh1a;

		std::regex re(R"((.+?)(\.[^.]+)?)");

		std::smatch results;

		std::regex_match(path, results, re);

		std::string name = results[1];

		indexCh1a = name.rfind('\\');

		if (indexCh1a != npos)
		{
			name = name.substr(indexCh1a + 1);
		}
	
		return std::pair(name, results[2]);

	}

	void utility::ToAscii(char *databytes, int bytes)
	{
		unsigned int uTmp;

		uTmp = bytes & 0x000f;

		databytes[1] = (uTmp < 10) ? (uTmp + 0x30) : (uTmp + 0x41 - 0xA);

		uTmp = (bytes >> 4) & 0x000f;

		databytes[0] = (uTmp < 10) ? (uTmp + 0x30) : (uTmp + 0x41 - 0xA);
	}

	std::byte utility::Ascii2Hex(char ascii)
	{
		return std::byte((ascii > 0x39) ? (ascii - 0x41 + 0xA) : (ascii - 0x30));
	}

	int utility::RandomInt(int Start, int End)
	{
		std::random_device seeder;

		const auto seed = seeder.entropy() ? seeder() : time(nullptr);

		std::mt19937 eng(static_cast<std::mt19937::result_type>(seed));

		std::uniform_int_distribution<int> dist(Start, End);

		auto gen = std::bind(dist, eng);

		return gen();
	}

	std::string_view utility::ExtractExtension(std::string_view fileName)
	{ 
		return fileName.substr(fileName.rfind('.'));
	}

	std::string & std_string_format(std::string & _str, const char * _Format, ...)
	{

		std::string tmp;

		va_list marker = NULL;

		va_start(marker, _Format);

		size_t num_of_chars = _vscprintf(_Format, marker);

		if (num_of_chars > tmp.capacity())
		{
			tmp.resize(num_of_chars + 1);
		}

		vsprintf_s((char *)tmp.data(), tmp.capacity(), _Format, marker);

		va_end(marker);

		_str = tmp.c_str();

		return _str;

	}


	int utility::Strtok(const std::string& source, std::string_view strDelimit, std::vector<std::string>& vec)
	{

		std::string strReg;

		std_string_format(strReg, R"(\s*[%s]\s*)", strDelimit);

		//R"(\s*[,;|]\s*)"
		std::regex reg(strReg);

		const std::sregex_token_iterator end;

		for (std::sregex_token_iterator iter(std::cbegin(source), std::cend(source), reg, -1); iter != end; ++iter)
		{
			std::string strTmp(*iter);

			vec.push_back(std::move(strTmp));
		}

		return 0;
	}



	std::string utility::GetSystemTime()
	{
		std::chrono::system_clock::time_point tp = std::chrono::system_clock::now();

		time_t tt = std::chrono::system_clock::to_time_t(tp);

		tm t;

		localtime_s(&t, &tt);

		char buff[80] = { 0 };

		strftime(buff, sizeof(buff), "%Y-%m-%d %H:%M:%S", &t);

		return std::string(buff);
	}


	bool utility::IsCardNOValid(std::string strCardNO)
	{

		std::regex reg18(R"(^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)");

		std::regex reg15(R"(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{2}[0-9Xx]$)");

		if (std::regex_match(strCardNO, reg18) || std::regex_match(strCardNO, reg15))
		{
			return true;
		}

		return false;
	}

	// check mail
	bool utility::IsEmailValid(std::string email_address)
	{
		// 正则表达式，匹配规则：
		// 第1组（即用户名），匹配规则：0至9、A至Z、a至z、下划线、点、连字符之中
		// 的任意字符，重复一遍或以上
		// 中间，一个“@”符号
		// 第二组（即域名），匹配规则：0至9和a至z之中的任意字符重复一遍或以上，
		// 接着一个点，接着a至z之中的任意字符重复2至3遍（如com或cn等），
		// 第二组内部的一组，一个点，接着a至z之中的任意字符重复2遍（如cn或fr等）
		// 内部一整组重复零次或一次

		std::regex reg("([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)");

		if (std::regex_match(email_address, reg))
		{
			/*
			std::string user_name, domain_name;
			// 截取第一组
			user_name = std::regex_replace(email_address, reg, std::string("$1"));

			// 截取第二组
			domain_name = std::regex_replace(email_address, reg, std::string("$2"));
			*/

			return true;
		}

		return false;
	}


	// 验证是否整数
	bool utility::IsIntegerValid(std::string strValue)
	{
		std::regex reg(R"(^[-+]?[0-9]*$)");

		if (std::regex_match(strValue, reg))
		{
			return true;
		}

		return false;
	}


	// 验证是否浮点数
	bool utility::IsFloatValid(std::string strValue)
	{
		std::regex reg(R"(^[-+]?[0-9]*\.?[0-9]+$)");

		if (std::regex_match(strValue, reg))
		{
			return true;
		}

		return false;
	}
}

